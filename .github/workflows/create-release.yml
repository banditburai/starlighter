name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Set up Python
      run: uv python install 3.12
      
    - name: Install dependencies
      run: uv sync --all-extras
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Get current version and calculate new version
      id: version
      run: |
        # Read current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Calculate new version based on input
        case "${{ github.event.inputs.version_type }}" in
          "major")
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            ;;
          "minor")
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            ;;
          "patch")
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
        TAG_NAME="v${NEW_VERSION}"
        
        echo "New version: $NEW_VERSION"
        echo "Tag name: $TAG_NAME"
        
        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Error: Tag $TAG_NAME already exists"
          exit 1
        fi
        
        # Export for later steps
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "${{ steps.version.outputs.current_version }}"/version = "${{ steps.version.outputs.new_version }}"/' pyproject.toml
        echo "Updated pyproject.toml version to ${{ steps.version.outputs.new_version }}"
        
    - name: Run quality checks
      run: |
        echo "Running pre-release quality checks..."
        uv run ruff check
        uv run ruff format --check
        uv run pytest tests/ -x --tb=short
        echo "âœ… All quality checks passed"
        
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "ðŸ”– Bump version to ${{ steps.version.outputs.new_version }}"
        
    - name: Generate release notes
      id: release_notes
      run: |
        echo "## What's Changed" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "Changes since $LAST_TAG:" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%an)" ${LAST_TAG}..HEAD >> RELEASE_NOTES.md
        else
          echo "- Initial release of Starlighter ${{ steps.version.outputs.new_version }}" >> RELEASE_NOTES.md
          echo "- High-performance Python syntax highlighter" >> RELEASE_NOTES.md
          echo "- FastHTML/StarHTML integration support" >> RELEASE_NOTES.md
          echo "- DataStar attribute highlighting" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Performance Targets" >> RELEASE_NOTES.md
        echo "- P99 latency: <100ms for 500-line files" >> RELEASE_NOTES.md
        echo "- Package size: ~29KB" >> RELEASE_NOTES.md
        echo "- Zero dependencies" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "pip install starlighter==${{ steps.version.outputs.new_version }}" >> RELEASE_NOTES.md
        echo "# or" >> RELEASE_NOTES.md
        echo "uv add starlighter==${{ steps.version.outputs.new_version }}" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md
        
    - name: Create and push tag
      run: |
        git tag -a "${{ steps.version.outputs.tag_name }}" -m "Release ${{ steps.version.outputs.new_version }}"
        git push origin main
        git push origin "${{ steps.version.outputs.tag_name }}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: "Release ${{ steps.version.outputs.new_version }}"
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: Release Summary
      run: |
        echo "ðŸŽ‰ Successfully created release ${{ steps.version.outputs.new_version }}"
        echo "ðŸ“¦ Tag: ${{ steps.version.outputs.tag_name }}"
        echo "ðŸš€ This will trigger the release.yml workflow to:"
        echo "   - Build and validate the package"
        echo "   - Publish to PyPI"
        echo "   - Create distribution files"
        echo ""
        echo "ðŸ”— Monitor the release workflow at:"
        echo "   ${{ github.server_url }}/${{ github.repository }}/actions"